首先看一下帧坐标控制的相关地址：
KOF'97： 100002
KOF'98： 100002
KOF'99： 100002
KOF'2K： 100002
KOF'2K1：300002
KOF'2K2：300002

好的!下面就以KOF2000为例子：

打开KOF2K_P2.ROM\BIN。来到100002，因为IORI的ID是1E，所以100002+1E×4＝10007A。接着来到10007A，我们看到了22 00 9A 55，再22559A－100000＝12559A，这个12559A就是8神的帧坐标数据的基址。呵呵~~，有了基址后应该怎么计算呢!!
你也知道8神的站立动作是由“4E01 4F01 5001 5101 5201 5301 5401 5501 5C02”这9帧组成的，那么就4E01这帧来说吧!!。12559A+014E×6＝125D6E，来到125D6E，看到了D5FF90FF4E01，他们是以6个字节为一组的，具体格式：XXFF YYFF ZZZZ，那它们是代表什么的呢????。就上面的D5FF 90FF 4E01来说：D5是X坐标，90是Y坐标，4E01是帧调用数据的代码。
再来多个例子，还是IORI，这次是找动作0156，就是第3个ST的图，通过计算可以知道他是AC03。所以12559A+03AC×6＝126BA2，看到了D0FF70FFFE83，D0和70分别是坐标相关的，这个FE83的帧代码怎么不是AC03，原来这里的代码不是在P2动作里面找到的帧代码!!，它是和计算出帧调用数据有关系的（它决定了该帧在调用区的位置），上面的帧代码（位置）是03FE。
例如看到1881，那么应该就是0118。如果是18C2，那么应该就是0218。

FE83---03FE   这个FE83，然后83FE再03FE
1881---0118   这个1881，然后8118再0118
18c2---0218   这个18c2，然后c218再0218

反正就注意FE 83的这个3和FE,那个8不用管它，就看那3位。。。。。，清楚了吧。。。??




下面说下，帧调用信息的相关地址：
KOF97：150000
KOF98：140000
KOF99：140000
KOF2K：138000
KOF01：100002
KOF02：100002

继续KOF2K。。。。。。
来到138000，因为IORI的ID是1E，所以138000+1E×4＝138078，所以去138078，看到了2C00B09E，再2C9EB0－100000＝1C9EB0，这个1C9EB0就是8神的帧调用信息的基址。
以上面说到的动作代码AC03找到的03FE说说看，1C9EB0+03FE×4＝1CAEA8，去1CAEA8，看到了2C009C9E，所以2C9E9C－100000＝1C9E9C，去1C9E9C，看到了：001009060600855D80FF80FF80FF80FF80FF80FF。晕~~，这些是什么呀??我们分开着看。。。。。。
0010 0906 0600855D 80FF80FF80FF80FF80FF80FF
0010是结构识别码，0906是长和宽，80FF80FF80FF80FF80FF80FF是TILE组合数据，这些是可以直接复制的。
这个0600855D是065D85，把它转成10进制是417157，打开WinKawaks进入游戏后选择IORI到对战画面，Ctrl+T打开平铺显示查看器，选择16×16那个，有个可以填数据的方框，填上417157，旁边显示的是16进制065D85，拉动下面那条拉线可以找到正确的色表。在这里我们看到了动作0156的图，但是他在那个C文件里面呢!!，地址是通过计算出来的。先了解下C_ROM结构先：一Tile由128字节存储，分别由2个C ROM来存放，每个ROM储64字节。就上面的地址417157（065D85），417157×128÷2=26698048（10进制）或者065D85×40＝1976140（16进制）。如果得数大于7FFFFF的话就-7FFFFF，直到小于7FFFFF。C_ROM是成双成对的（c1c2 c3c4 c5c6 c7c8）。那么上面计算到的地址是1976140（16进制）大于7FFFFF，所以1976140-7FFFFF＝1176141，还是大于7FFFFF，再1176141-7FFFFF＝976142，976142-7FFFFF＝176143，每减一次就前进一对，所以它是在c7c8的，但是计算出来的地址还需将“个位”置0，所以上面计算到的地址176143应该是176140这个176140才是他在c7和c8的地址。




现在我们试着加一帧看看，就添加豺华吧!!

来到KOF2002找到豺华的动作，通过计算我们知道是由DC03等帧组成的，现在就向KOF2000加DC03这帧。

打开KOF02的P2.rom，来到300002，因为IORI的ID是15，所以300002+15×4＝300056，看到了2300E4D5，所以23D5E4+100000=33D5E4（这里是用加，其他代的不大清楚，整体上是“??指针然后数据”这样来存放!），所以33D5E4就是IOIR帧坐标数据的基址。
就DC03这帧，所以33D5E4+03DC×6＝33ED0C，到33ED0C看到了C9FF94FF7301。

然后来到100002，100002+15×4＝100056得263E02，再减去100000得163E02是IORI的帧调用信息的基址。所以163E02+0173×4＝1643CE，去1643CE看到了26004623得162346，来到162346看到了
0A10070630B5FEFEFEFEFEFE36363636DA36DCDBDEDDDF36E1E0E3E2E5E4E7E636E8EAE9ECEBEEEDEF36F036F2F136F33636F436F6F5，这些就是DC03该帧的C调用数据。我们分开着看：
0A10 0706 30B5 FEFEFEFEFEFE36363636DA36DCDBDEDDDF36E1E0E3E2E5E4E7E636E8EAE9ECEBEEEDEF36F036F2F136F33636F436F6F5
0A10是结构识别码，0706是长和宽，FEFEFEFEFEFE是TILE组合数据，这些都可以直接复制。我们Ctrl+T打开平铺显示查看器，填上243162，它的16进制是03B5DA。把03B5DA分开看是03 B5 DA，将03×10＝30再把B5加上就是30B5，最后DA就是03B5DA中的DA，那么36就是03B536~~这个是透明的TILE。F5就是03B5F5的F5。也就是说后面那些都是图像指针，每个字节指向对应的16×16的图块。DC03这帧的第一块是从03B5DA--03B5F6结束，通过计算得到：6D7681--6D7D81，再将“个位”置0得6D7680--6D7D80，所以到C3/C4的6D7680去，从6D7680开始到6D7DBF结束，为什么是6D7DBF而不是6D7D80呢?，6D7680是第一块的开始，而6D7680是最后一块的开始，我们要的是它的结束地址，还记得刚才说的么：“一Tile由128字节存储，分别由2个C ROM来存放，每个ROM储64字节”，所以是6D7DBF。

在KOF2000的C7/C8还有空白的空间在,地址是68AA80，在平铺显示查看器是500394（07A2AA），所以把KOF2002的C3和C4的数据6D7680至到6D7DBF一起复制过去。

好的~~!现在开始加新帧。。。。。。，来到10007A知道12559A，由下个人物126DA0，全部数据是从12559A至126D9F，我们要在他的后面加，但是后面是下一个人物的数据所以没地方，不过在12F9F8发现了有空白的地方，我们把12559A至126D9F是数据复制过去，再把10007A的22009A55修改为2200F8F9，这样后面不就有空间了吗?
（12559A至126D9F这里已经没用了，我们已经把指针指向12F9F8了，所以这里全部改为FF吧，也许以后有用!。），来到1311F8这里是6个00，每个人的最后面都是6个00~~没用的，所以把刚才在02找到的C9FF94FF7301复制过去，我们现在加的这帧在动作代码是多少呢?，所以（1311F8-12F9F8）÷6＝400，所以这帧的动作代码是0004。接下来就是加帧调用信息了，来到138000，IORI是138078得1C9EB0，从1C9EB0至1CAEAF，我们要在1CAEAF后面加帧调用信息~~但是没空间，不过后面的1F2272可是空白地方，所以把1C9EB0至1CAEAF是数据复制过去，1C9EB0至1CAEAF这里已经没用了全部改为FF吧。来到138078把2C00B09E改为2F007222。按照加到C7/C8的地址~~把02的调用信息修改再复制到1C9EB0（我们刚才修改了，所以这里是空白的，复制的数据是：0A10070670A2FEFEFEFEFEFEC7C7C7C7AAC7ACABAEADAFC7B1B0B3B2B5B4B7B6C7B8BAB9BCBBBEBDBFC7C0C7C2C1C7C3C7C7C4C7C6C5）。好的现在再去1F326E看到了2C0042F6这个是指向下一个人物，好像没什么用~~等加完以后再补在最后面，把他修改为刚才复制调用信息的地址1C9EB0也就是2C00B09E，地址是1F326E，把（1F326E-1F2272）÷4＝3FF。再到1311F8把C9FF94FF7301修改为C9FF94FFFF03。刚刚加的这帧的动作代码是0004，到此添加豺华第一帧就完成了。。。。。

当然上面只是一个例子!!，更多的技巧需要自己在实践中去掌握（刚刚学的话建议先拿0110这种结构来练手，因为其他的结构都是从这个基础上变化得来的!!）。。。。。。

我们在移动帧的TILE数据时，可以这样来加快移动的速度，例如下面这个：0826040860007030F0F0F0F0307093EA94EA95EA96EA97EA98EA99EAB2DC9AEA9BEA9CEA9DEA9EEA9FEAA0EAB2DCA1EAA2EAA3EAA4EAA5EAA6EAA7EAA8EAA9EAAAEA，它的指向位置是06EAXX，现在要把它按照C图加的位置来改变，比如新加的地址是68AA80，先把它按照格式分开来：
0826 0408 6000 7030F0F0F0F03070
93EA 94EA 95EA 96EA 97EA 98EA 99EA B2DC 9AEA 9BEA 9CEA 9DEA 9EEA 9FEA A0EA B2DC A1EA A2EA A3EA A4EA A5EA A6EA A7EA A8EA A9EA AAEA （把这些数据复制到记事本去）
现在我们要移动到的位置是06 AA 80开始，原来的指向位置是06 EA 93开始。利用记事本的“查找/替换”功能，查找“EA ”替换为“AA ”，替换后就是下面这样：
0826 0408 6000 7030F0F0F0F03070
93AA 94AA 95AA 96AA 97AA 98AA 99AA B2DC 9AAA 9BAA 9CAA 9DAA 9EAA 9FAA A0AA B2DC A1AA A2AA A3AA A4AA A5AA A6AA A7AA A8AA A9AA AAAA 
然后93AA修改为80AA，后面的就以加1继续改，这些按顺序排列的到是好处理!!但是有些排列是乱的（比如93AA A0AA这样排的话就这些又乱又多的情况下不就看得头都晕了。现在我们重新开始，刚才是93AA修改为80AA，将80（06AA80）－93（06EA93）＝－13，所以这2数的差值是－13，那么下一个94AA就可以这样计算了：94－13＝81得81AA。这样做是为了处理一些比较乱的指针时用的，为什么?，呵呵~~到时你就知道苦了。。。。。。

完。。。。。。，以上，有些是个人看法，不对的地方请谅解。




还有，关于帧调用信息的各种结构。。。。。。

0010 0906 0600855D 80FF80FF80FF80FF80FF80FF
0010是结构识别码，0906是长和宽，80FF80FF80FF80FF80FF80FF是TILE组合数据，这些可以直接复制，0600855D是地址。

0110 0705 0600C522 FEFEFEFE00FE
0110是结构识别码，0705是长和宽，FEFEFEFE00FE是TILE组合数据，这些可以直接复制，0600C522是地址。

0210 0101 9B930010
0210是结构识别码，0101是长和宽，9B930010是图地址：0001939B

0310 0807 3000 36B5 36B5 36B5 36B5 36B5 36B5 F7B5 F8B5 F9B5 FAB5 FBB5 36B5 36B5 FCB5 FDB5 FEB5 FFB5 00B6 01B6 02B6 03B6 04B6 05B6 36B5 06B6 07B6 08B6 09B6 0AB6 0BB6 0CB6 36B5 36B5 0DB6 0EB6 0FB6 10B6 11B6 12B6 13B6 36B5 36B5 36B5 36B5 14B6 15B6 16B6 17B6 36B5 36B5 36B5 36B5 36B5 18B6 19B6 1AB6
0310是结构识别码，0807是长和宽，3000是图地址（例如地址是03XXXX，所以03得30，然后填上00，3000就是这样得到的），继续。。。。。。，36B5指向的地址是03B536，F7B5指向的地址是03B5F7。。。。。。OK!!

0510：同0610

0610 0704 FEE67EFC
4F0C2020500C E1E02020510C 520C2020530C 540C2020550C 560C2020570C 580C2020590C 5A0C20205B0C 5C0C20205D0C 5E0C20205F0C 600C2020610C 620C2020630C 640C2020650C
0610是结构识别码，0704是长和宽，FEE67EFC是TILE组合数据，这些可以直接复制，4F0C2020500C是图地址4F0C20是020C4F 20500C是020C50。再520C2020530C，520C20是020C52，20530C是020C53。。。。。OK!!

0710 0A03 1000 C0B9 C0BF C0。。。B72B B82B B92B
0A 03是长和宽，10 00是C的最高位地址数据 1，C0 B9。。。是图像组合数据，B72B等是图像块的C的地址数据，和最高位地址数据组合起来，得12BB7。。。。。。

0726 0F09 6000 0020803B0CFFDCFE7EF3FEFFFEFFFCFF3C08
81EE 82EE 83EE 84EE 85EE 86EE 87EE 88EE 89EE 。。。。。。
0726是结构识别码，0F09是长和宽，0020803B0CFFDCFE7EF3FEFFFEFFFCFF3C08是TILE组合数据，这些可以直接复制，6000是图地址（例如地址是06XXXX，所以06得60，然后填上00，6000就是这样得到的），继续。。。。。。，81EE指向的地址是06EE81，82EE指向的地址是06EE82。。。。。。OK!!

0810 0604 1000 FCF87CFC
CD70 8B72 CF70 D070 D170 D270 8C72 D470 D570 D670 C170 D770 D870 D970 C570 C670 C770 DA70 DB70 CA70 CB70 CC70
0810是结构识别码，0604是长和宽，FCF87CFC是TILE组合数据，这些可以直接复制，1000是图地址（例如地址是01XXXX，所以01得10，然后填上00，1000就是这样得到的），CD70就是0170CD，8B72就是01728B。。。。。。

0A10 0706 30B5 FEFEFEFEFEFE 36363636DA36DCDBDEDDDF36E1E0E3E2E5E4E7E636E8EAE9ECEBEEEDEF36F036F2F136F33636F436F6F5
0A10是结构识别码，0706是长和宽，FEFEFEFEFEFE是TILE组合数据，这些可以直接复制，把03B5DA分开看是03 B5 DA，将03×10＝30再把B5加上就是30B5，DA就是03B5DA中的DA，那么36就是03B536，F5就是03B5F5的F5。


最后，结构好像都是0?xx，正确的说应该是0?是结构 xx是色表，如果是加人物的话大都是0?10。



